name: Nightly Build

on:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      force_build:
        description: "Force build even if no new commits"
        required: false
        default: false
        type: boolean

permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  check-new-commits:
    name: Check for new commits
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      version: ${{ steps.version.outputs.version }}
      short_hash: ${{ steps.version.outputs.short_hash }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for new commits since last nightly
        id: check
        run: |
          # Get the latest nightly release
          LATEST_NIGHTLY=$(gh release list --limit 1 --json tagName,isPrerelease --jq '.[] | select(.isPrerelease == true) | .tagName' | head -1 || echo "")

          if [ -z "$LATEST_NIGHTLY" ]; then
            echo "No previous nightly releases found, will build"
            echo "should_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get the commit of the latest nightly release
          LATEST_COMMIT=$(gh release view "$LATEST_NIGHTLY" --json body --jq '.body' | grep -o 'Commit: [a-f0-9]\{40\}' | cut -d' ' -f2 || echo "")

          if [ -z "$LATEST_COMMIT" ]; then
            echo "Could not determine commit from latest nightly, will build"
            echo "should_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if there are new commits since the latest nightly
          NEW_COMMITS=$(git rev-list --count "$LATEST_COMMIT"..HEAD 2>/dev/null || echo "1")

          if [ "$NEW_COMMITS" -gt 0 ] || [ "${{ github.event.inputs.force_build }}" = "true" ]; then
            echo "Found $NEW_COMMITS new commits since last nightly, will build"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "No new commits since last nightly, skipping build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Get version info
        id: version
        if: steps.check.outputs.should_build == 'true'
        run: |
          # Extract version from build.zig.zon
          VERSION=$(grep -o '\.version = "[^"]*"' build.zig.zon | cut -d'"' -f2)
          SHORT_HASH=$(git rev-parse --short HEAD)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "short_hash=${SHORT_HASH}" >> $GITHUB_OUTPUT

  build:
    name: Build for ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.runs-on }}
    needs: check-new-commits
    if: needs.check-new-commits.outputs.should_build == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-linux-gnu
            runs-on: ubuntu-latest
            os: linux
            arch: aarch64
            ext: ""
          - target: x86_64-linux-gnu
            runs-on: ubuntu-latest
            os: linux
            arch: x86_64
            ext: ""
          - target: x86_64-windows
            runs-on: ubuntu-latest
            os: windows
            arch: x86_64
            ext: ".exe"
          - target: aarch64-macos
            runs-on: macos-15
            os: macos
            arch: aarch64
            ext: ""
            release: small

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup mise
        uses: jdx/mise-action@v2
        with:
          install: true
          experimental: true
          cache: true

      - name: Cache .zig-cache
        uses: actions/cache@v4
        with:
          path: .zig-cache
          key: zig-cache-${{ matrix.os }}-${{ matrix.arch }}-${{ hashFiles('build.zig', 'build.zig.zon') }}
          restore-keys: |
            zig-cache-${{ matrix.os }}-${{ matrix.arch }}-
            zig-cache-

      - name: Build for ${{ matrix.os }} ${{ matrix.arch }}
        run: mise run build --target=${{ matrix.target }}${{ matrix.release && format(' --release={0}', matrix.release) || '' }}

      - name: Package Windows build
        if: matrix.os == 'windows'
        run: |
          mkdir -p dist
          # Copy binary from zig-out/bin
          cp zig-out/bin/* dist/
          # Copy midi folder from project root
          cp -r midi dist/
          # Package into zip
          cd dist && zip -r ../roller-${{ matrix.os }}-${{ matrix.arch }}.zip *

      - name: Package macOS build
        if: matrix.os == 'macos'
        run: |
          mkdir -p dist
          # Copy binary from zig-out/bin
          cp zig-out/bin/* dist/
          # Copy midi folder from project root
          cp -r midi dist/
          # Package into zip
          cd dist && zip -r ../roller-${{ matrix.os }}-${{ matrix.arch }}.zip *

      - name: Package Linux build
        if: matrix.os == 'linux'
        run: |
          mkdir -p dist
          # Copy binary from zig-out/bin
          cp zig-out/bin/* dist/
          # Copy midi folder from project root
          cp -r midi dist/
          # Package into tar.gz
          cd dist && tar -czf ../roller-${{ matrix.os }}-${{ matrix.arch }}.tar.gz *

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: roller-${{ matrix.os }}-${{ matrix.arch }}
          path: roller-${{ matrix.os }}-${{ matrix.arch }}.*
          retention-days: 7

  release:
    name: Create nightly release
    runs-on: ubuntu-latest
    needs: [check-new-commits, build]
    if: needs.check-new-commits.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Copy all zip and tar.gz files from artifacts
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} release-assets/ \;

      - name: Create nightly release
        env:
          VERSION: ${{ needs.check-new-commits.outputs.version }}
          SHORT_HASH: ${{ needs.check-new-commits.outputs.short_hash }}
        run: |
          RELEASE_TAG="nightly-${VERSION}-${SHORT_HASH}"
          RELEASE_NAME="Nightly Build ${VERSION}-${SHORT_HASH}"

          # Create release notes
          cat > release_notes.md << EOF
          This is an automated nightly build of the ROLLER project.

          **Build Information:**
          - Version: ${VERSION}
          - Commit: ${SHORT_HASH}
          - Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          **Platforms:**
          - Linux x86_64
          - Linux ARM64
          - Windows x86_64
          - macOS ARM64

          **Note:** This is a pre-release build and may contain bugs or incomplete features.

          ---
          Built automatically by GitHub Actions
          EOF

          # Delete existing nightly release if it exists
          gh release delete "$RELEASE_TAG" --yes || true

          # Create new release
          gh release create "$RELEASE_TAG" \
            --title "$RELEASE_NAME" \
            --notes-file release_notes.md \
            --prerelease \
            --target "$(git rev-parse HEAD)" \
            release-assets/*

  cleanup:
    name: Cleanup old nightly releases
    runs-on: ubuntu-latest
    needs: [release]
    if: always() && needs.check-new-commits.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cleanup old nightly releases
        run: |
          # Keep only the 5 most recent nightly releases
          gh release list --limit 50 --json tagName,isPrerelease,createdAt \
            --jq '.[] | select(.isPrerelease == true and (.tagName | startswith("nightly-"))) | .tagName' \
            | tail -n +6 \
            | xargs -I {} gh release delete {} --yes || true
